Current: 

TODO: 

0. Preserve the state between page reloadings. See - 
https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage

1. Create components for text, checkbox inputs and button. These components should have two states: view and edit so
we can easily create edit forms from view when nessecesary.
2. Add prop types to components.
3. Create two tabs: done and not done TODOs. Make checkbox of todo on the main page editable.
4. Implement pagination for todosList
5. Use storybook.js.org ? (I believe that reportportal use this framework)
6. Replace basic authentication with OAuth authentication in the AuthService.js
11. Add feature so multiple users can register, login and see only their todos and being able
to edit only their todos
12. Add registration page
13. Show creation date for todo on UI 
14. Sort  todos by creation date
15. Add tab for Active and Done todos
16. Add feature for deleted (atchived) todos
18. Handle exceptions in api services (403, 404, etc.)
19. Why Login component is rendered twice ?
20.

Done: 
7. Add functionality for deleting todos (soft delete).
8. Check edit page after a few todos deleted. Seems there is a bug.
9. Make sure that when delete a todo the right one is deleted.
10. Add message panel below navbar (show that todo added there)

QUESTIONS:

1. Do I need to create View and Edit components or create generic component that takes
a mode props and show either View or Edit inputs.
What I found on the internet that people using conditioning to do this. So one conponent for new and edit

2. How to create breadcrumbs component? When I am using react-router I need to import components that are on the
page specified in the breadcrumbs (it looks really hard to overcome and definitely not the best way
to solve this problem).

3. How to stop opening new page when clicking a link ?
I used to use <a> tag for links. To stop opening new pages I just replaced
<a> with <Link>

4. Is it possible to keep all the code for the interaction with REST API in one separate file ?
If you use callbacks then YES.